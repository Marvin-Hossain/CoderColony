name: Build and Deploy

on:
  push:
    branches: [ main ]
  workflow_dispatch:  # Allows manual triggering

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
        
    - name: Build with Maven
      run: mvn -B package -DskipTests
      
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
        
    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build
        
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_TOKEN }}
        
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/jobhunthub-backend:latest
        
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v4
      with:
        context: ./frontend
        push: true
        tags: ${{ secrets.DOCKER_HUB_USERNAME }}/jobhunthub-frontend:latest

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: success()
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
        
    - name: Generate Dockerrun.aws.json
      run: |
        echo '{
          "AWSEBDockerrunVersion": "1",
          "Image": {
            "Name": "${{ secrets.DOCKER_HUB_USERNAME }}/jobhunthub-backend:latest",
            "Update": "true"
          },
          "Ports": [
            {
              "ContainerPort": "8080",
              "HostPort": "80"
            }
          ]
        }' > Dockerrun.aws.json
        
    - name: Prepare .ebextensions configuration
      run: |
        mkdir -p .ebextensions
        cp .github/ebextensions.config.template .ebextensions/01_env_vars.config

        sed -i "s#__JDBC_DATABASE_URL__#${{ secrets.JDBC_DATABASE_URL }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__JDBC_DATABASE_USERNAME__#${{ secrets.JDBC_DATABASE_USERNAME }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__JDBC_DATABASE_PASSWORD__#${{ secrets.JDBC_DATABASE_PASSWORD }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__OPENAI_API_KEY__#${{ secrets.OPENAI_API_KEY }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__OAUTH_CLIENT_ID__#${{ secrets.OAUTH_CLIENT_ID }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__OAUTH_CLIENT_SECRET__#${{ secrets.OAUTH_CLIENT_SECRET }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__FRONTEND_URL__#${{ secrets.FRONTEND_URL }}#g" .ebextensions/01_env_vars.config
        sed -i "s#__ALLOWED_ORIGIN__#${{ secrets.ALLOWED_ORIGIN }}#g" .ebextensions/01_env_vars.config
      env:
        JDBC_DATABASE_URL: ${{ secrets.JDBC_DATABASE_URL }}
        JDBC_DATABASE_USERNAME: ${{ secrets.JDBC_DATABASE_USERNAME }}
        JDBC_DATABASE_PASSWORD: ${{ secrets.JDBC_DATABASE_PASSWORD }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        OAUTH_CLIENT_ID: ${{ secrets.OAUTH_CLIENT_ID }}
        OAUTH_CLIENT_SECRET: ${{ secrets.OAUTH_CLIENT_SECRET }}
        FRONTEND_URL: ${{ secrets.FRONTEND_URL }}
        ALLOWED_ORIGIN: ${{ secrets.ALLOWED_ORIGIN }}

    - name: Deploy to Elastic Beanstalk
      uses: einaregilsson/beanstalk-deploy@v21
      with:
        aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        application_name: JobHuntHub
        environment_name: ${{ secrets.EB_ENVIRONMENT_NAME }}
        region: ${{ secrets.AWS_REGION }}
        version_label: ${{ github.sha }}
        